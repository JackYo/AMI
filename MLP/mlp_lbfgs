import csv
import sys
import warnings

import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_boston
from sklearn.neural_network import MLPRegressor
from sklearn.utils.testing import (assert_raises, assert_greater, assert_equal,
								   assert_false, ignore_warnings)

def readcsv(data_file_name):
	with open(data_file_name) as f:
		data_file = csv.reader(f)
		temp = next(data_file)
		n_samples = int(temp[0])
		n_features = int(temp[1])
		data = np.empty((n_samples, n_features))
		target = np.empty((n_samples,))
		temp = next(data_file)  # names of features
		feature_names = np.array(temp)

		for i, d in enumerate(data_file):
			data[i] = np.asarray(d[2:-1], dtype=np.float64)
			target[i] = np.asarray(d[-1], dtype=np.float64)

		return data, target


ACTIVATION_TYPES = ["identity", "logistic", "tanh", "relu"]
#ACTIVATION_TYPES = ["identity"]
boston = readcsv('data/combined.csv')
Xbos = StandardScaler().fit_transform(boston[0])
#boston = load_boston()
sampleMin = 0
sampleMax = 1000
featureIndex = sampleMax
targetIndex = sampleMin
testTargetIndexR = sampleMax
testTargetIndexL = 700
#result = []

activation_predict = np.empty((1,4))
predict = np.empty((0,4))


for k in range(1,10):

	X = Xbos[sampleMin:featureIndex]
	y = boston[1][targetIndex:sampleMax]

	Xtest = Xbos[700:sampleMax]
	ytest = boston[1][testTargetIndexL:testTargetIndexR]

	for i,activation in enumerate(ACTIVATION_TYPES):
		mlp = MLPRegressor(solver='lbfgs', hidden_layer_sizes=50,max_iter=150, shuffle=True, random_state=1,activation=activation) 
		mlp.fit(X, y)
		
		"""
		if activation == 'identity':
			assert_greater(mlp.score(X, y), 0.84)
		else:
			# Non linear models perform much better than linear bottleneck:
			assert_greater(mlp.score(X, y), 0.95)
			"""

		print('ACTIVATION_TYPES - {0} : '.format(activation))
		print('training score is {0}'.format(mlp.score(X,y)))
		print('predict result:\n {0}'.format(mlp.predict(Xtest)))
		predictScore = mlp.score(Xtest, ytest)
		activation_predict[0][i]= predictScore
		print('predict score is {0}'.format(predictScore))
		print('\n')

	featureIndex = featureIndex-1
	targetIndex = targetIndex+1
	testTargetIndexL = testTargetIndexL+1
	testTargetIndexR = testTargetIndexR+1
	predict= np.append(predict,activation_predict,0)

print("identity", "logistic", "tanh", "relu")
print(predict)
